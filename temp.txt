import express from 'express'
import { fetchHistory } from '../controllers/Chatbot.js'
const chatRouter = express.Router()

// chatRouter.post('/chat' , chat)
chatRouter.get('/fetchHistory' , fetchHistory)

export {chatRouter}

// controllers/ChatbotSocket.js
import { GoogleGenAI } from "@google/genai";
import History from "../models/History.js";
import dotenv from "dotenv";
dotenv.config();

const ai = new GoogleGenAI({ apiKey: process.env.GOOGLE_API_KEY });
const users = new Map();

function socketHandler(io) {
  io.on("connection", (socket) => {
    console.log("A user connected:", socket.id);

    socket.on("register-user", (userId) => {
      users.set(userId, socket.id);
    });

    socket.on("send-message", async ({ userId, message, history, chatId }) => {
      try {
        console.log('Hello')
        const chat = ai.chats.create({ model: "gemini-2.5-flash", history });
        let botResponse = "";

        const response1 = await chat.sendMessageStream({ message })

        for await (const chunk of response1) {
          if (chunk.text) {
            botResponse += chunk.text;
            const userSocket = users.get(userId);
            if (userSocket) io.to(userSocket).emit("receive-response", chunk.text);
          }
        }

        let chatHistory = chatId !== "not" ? await History.findById(chatId) : null;
        if (!chatHistory) chatHistory = new History({ userId, messages: [] });

        chatHistory.messages.push({ role: "user", parts: [{ text: message1 }] });
        chatHistory.messages.push({ role: "model", parts: [{ text: botResponse }] });
        await chatHistory.save();
        const user = users.get(userId);
        io.to(user).emit("message-status", { status: 1 });
    } catch (err) {
        console.error(err);
        const userSocket = users.get(userId);
        if (userSocket) io.to(userSocket).emit("message-status", { status: 0});
      }
    });

    socket.on("disconnect", () => {
      console.log("User disconnected:", socket.id);
      for (let [userId, id] of users.entries()) {
        if (id === socket.id) users.delete(userId);
      }
    });
  });
}

export default socketHandler;


async function fetchHistory(req, res) {
    try {
        const history = await History.find({ userId: req.user.id });
        return res.send({ status: 1, data: history })
    } catch (err) {
        console.log(err);
        return res.send({ status: 0, msg: "Error in fetching history" })
    }
}

export {fetchHistory , socketHandler}


import express from 'express'
import mongoose from 'mongoose'
import cookieParser from 'cookie-parser'
import bodyParser from "body-parser";
import http from 'http'
import { Server } from 'socket.io'
import path from "path";
import { fileURLToPath } from "url";
import cors from 'cors'
import dotenv from 'dotenv'
import { userRouter } from './App/Routes/user.js'
import { chatRouter } from './App/Routes/Chatbot.js';
import { isLoggedIn } from './middleware/auth.js';
import { socketHandler } from './App/controllers/Chatbot.js';

dotenv.config()

const app = express()
const server = http.createServer(app)
const io = new Server(server, {
    cors: {
        origin: process.env.FRONTEND_URL,
        credentials: true,
    }
});

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.use(express.json())
app.use(cookieParser())
app.use(cors({
    origin: process.env.FRONTEND_URL,
    credentials: true
}))
app.use(express.static(path.join(__dirname, "public")));
app.use(bodyParser.json({ limit: "100mb" }));
app.use(bodyParser.urlencoded({ limit: "100mb", extended: true }));
app.use(isLoggedIn)

socketHandler(io)
app.get('/', (req, res) => {
    res.send("hello world")
})
app.use('/', userRouter);
app.use('/', chatRouter);

mongoose.connect(process.env.DB_URL, {
    dbName: "Vakil"
}).then(() => {
    console.log("DB connected");
    server.listen(process.env.PORT, () => {
        console.log(`Server is running on port ${process.env.PORT}`);
    })
})
